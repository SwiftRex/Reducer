{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compose"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"first"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/Reducer\/documentation\/Reducer\/Reducer","preciseIdentifier":"s:7ReducerAAV","text":"Reducer"},{"kind":"text","text":", "},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"others"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/Reducer\/documentation\/Reducer\/Reducer","preciseIdentifier":"s:7ReducerAAV","text":"Reducer"},{"kind":"text","text":"...) -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/Reducer\/documentation\/Reducer\/Reducer","preciseIdentifier":"s:7ReducerAAV","text":"Reducer"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"a composed reducer "},{"type":"codeVoice","code":"(ActionType, inout StateType) -> Void"},{"type":"text","text":" equivalent to "},{"type":"codeVoice","code":"g(f(x))"}]}]},{"kind":"parameters","parameters":[{"name":"first","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"First reducer "},{"type":"codeVoice","code":"(ActionType, inout StateType) -> Void"},{"type":"text","text":", let’s call it "},{"type":"codeVoice","code":"f(x)"}]}]},{"name":"others","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Second, Third, nth reducers "},{"type":"codeVoice","code":"(ActionType, inout StateType) -> Void"},{"type":"text","text":", let’s call it "},{"type":"codeVoice","code":"g(x)"}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When composing reducer A with reducer B, when an action X arrives, first it will be forwarded to"},{"type":"text","text":" "},{"type":"text","text":"reducer A together with the initial state. This reducer may return a slightly (or completely) changed state from"},{"type":"text","text":" "},{"type":"text","text":"that operation, and this state will then be forwarded to reducer B together with the same action X. If you change"},{"type":"text","text":" "},{"type":"text","text":"the order, results may vary as you can imagine. Monoids don’t necessarily hold the commutative axiom, although"},{"type":"text","text":" "},{"type":"text","text":"sometimes they do. What they necessarily hold is the associativity axiom, which means that if you compose A and B,"},{"type":"text","text":" "},{"type":"text","text":"and later C, it’s exactly the same as if you compose A to a previously composed B and C:"},{"type":"text","text":" "},{"type":"codeVoice","code":".compose(.compose(A, B), C) == .compose(A, .compose(B, C))"},{"type":"text","text":". So please don’t worry about surrounding your reducers with parenthesis:"}]},{"type":"codeListing","syntax":null,"code":["let globalReducer = .compose(firstReducer, secondReducer, thirdReducer, andSoOn)"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/reducer\/reducer\/compose(_:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Reducer\/documentation\/Reducer\/Reducer\/compose(_:_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Composes two or more reducers in series, to be evaluated from the left to the right for each incoming action."}],"kind":"symbol","metadata":{"role":"symbol","title":"compose(_:_:)","roleHeading":"Type Method","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compose"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:7ReducerAAV"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:7ReducerAAV"},{"kind":"text","text":"...) -> "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:7ReducerAAV"}],"symbolKind":"method","externalID":"s:7ReducerAAV7composeyAByxq_GAD_ADdtFZ","extendedModule":"Reducer","modules":[{"name":"Reducer"}]},"hierarchy":{"paths":[["doc:\/\/Reducer\/documentation\/Reducer","doc:\/\/Reducer\/documentation\/Reducer\/Reducer"]]},"references":{"doc://Reducer/documentation/Reducer/Reducer":{"role":"symbol","title":"Reducer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"abstract":[{"type":"text","text":"An entity that calculates the new state when given current state and an incoming action "},{"type":"codeVoice","code":"(Action, inout State) -> Void"},{"type":"text","text":"."}],"identifier":"doc:\/\/Reducer\/documentation\/Reducer\/Reducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/reducer\/reducer"},"doc://Reducer/documentation/Reducer":{"role":"collection","title":"Reducer","abstract":[],"identifier":"doc:\/\/Reducer\/documentation\/Reducer","kind":"symbol","type":"topic","url":"\/documentation\/reducer"},"doc://Reducer/documentation/Reducer/Reducer/compose(_:_:)":{"role":"symbol","title":"compose(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compose"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:7ReducerAAV"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:7ReducerAAV"},{"kind":"text","text":"...) -> "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:7ReducerAAV"}],"abstract":[{"type":"text","text":"Composes two or more reducers in series, to be evaluated from the left to the right for each incoming action."}],"identifier":"doc:\/\/Reducer\/documentation\/Reducer\/Reducer\/compose(_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/reducer\/reducer\/compose(_:_:)"}}}