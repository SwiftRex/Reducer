{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"identity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/Reducer\/documentation\/Reducer\/Reducer","preciseIdentifier":"s:7ReducerAAV","text":"Reducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ActionType","preciseIdentifier":"s:7ReducerAAV10ActionTypexmfp"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StateType","preciseIdentifier":"s:7ReducerAAV9StateTypeq_mfp"},{"kind":"text","text":"> { "},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Therefore:"}]},{"type":"codeListing","syntax":null,"code":["   .compose( Reducer<ActionType, StateType>, .identity )","== .compose( .identity, Reducer<ActionType, StateType> )","== Reducer<ActionType, StateType>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is useful for composition purposes, for example when you call a function "},{"type":"codeVoice","code":"Array.reduce"},{"type":"text","text":" in an array of Reducers and you need a no-op start:"}]},{"type":"codeListing","syntax":null,"code":["[reducer1, reducer2].reduce(.identity) { accumulator, nextReducer in","   Reducer.compose(accumulator, nextReducer)","}","\/\/ .identity won't have any behaviour and the final composition \".identity >>> reducer1, reducer2\" will be as if .identity wasn't there."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The implementation of this reducer, as one should expect, simply ignores the action and returns the state unchanged"}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/reducer\/reducer\/identity"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Reducer\/documentation\/Reducer\/Reducer\/identity","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"No-op reducer. Composing it with any other reducer will not change anything from the other reducer behaviour, regardless if the identity reducer"},{"type":"text","text":" "},{"type":"text","text":"is on the left-hand side or the right-hand side or this composition. This is the neutral element in a monoidal composition."}],"kind":"symbol","metadata":{"role":"symbol","title":"identity","roleHeading":"Type Property","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"identity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:7ReducerAAV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ActionType","preciseIdentifier":"s:7ReducerAAV10ActionTypexmfp"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StateType","preciseIdentifier":"s:7ReducerAAV9StateTypeq_mfp"},{"kind":"text","text":">"}],"symbolKind":"property","externalID":"s:7ReducerAAV8identityAByxq_GvpZ","extendedModule":"Reducer","modules":[{"name":"Reducer"}]},"hierarchy":{"paths":[["doc:\/\/Reducer\/documentation\/Reducer","doc:\/\/Reducer\/documentation\/Reducer\/Reducer"]]},"references":{"doc://Reducer/documentation/Reducer":{"role":"collection","title":"Reducer","abstract":[],"identifier":"doc:\/\/Reducer\/documentation\/Reducer","kind":"symbol","type":"topic","url":"\/documentation\/reducer"},"doc://Reducer/documentation/Reducer/Reducer/identity":{"role":"symbol","title":"identity","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"identity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:7ReducerAAV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ActionType","preciseIdentifier":"s:7ReducerAAV10ActionTypexmfp"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StateType","preciseIdentifier":"s:7ReducerAAV9StateTypeq_mfp"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"No-op reducer. Composing it with any other reducer will not change anything from the other reducer behaviour, regardless if the identity reducer"},{"type":"text","text":" "},{"type":"text","text":"is on the left-hand side or the right-hand side or this composition. This is the neutral element in a monoidal composition."}],"identifier":"doc:\/\/Reducer\/documentation\/Reducer\/Reducer\/identity","kind":"symbol","type":"topic","url":"\/documentation\/reducer\/reducer\/identity"},"doc://Reducer/documentation/Reducer/Reducer":{"role":"symbol","title":"Reducer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"abstract":[{"type":"text","text":"An entity that calculates the new state when given current state and an incoming action "},{"type":"codeVoice","code":"(Action, inout State) -> Void"},{"type":"text","text":"."}],"identifier":"doc:\/\/Reducer\/documentation\/Reducer\/Reducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/reducer\/reducer"}}}